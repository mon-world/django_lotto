"""
Django settings for site_1 project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 프로젝트 폴더 안에 특정 폴더의 경로
# 가장 바깥에 있는 프로젝트 폴더 경로이다.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 이걸 올릴 다른걸로!
SECRET_KEY = 'django-insecure-2#on5_el(&h2x5cn&aogvma%6+*6*&5zr8^v2yqi)1=l2!$2+4'

# SECURITY WARNING: don't run with debug turned on in production!
# true : 에러 터졌을 때, 에러를 상세하게 알려준다. - 개발엔 Ture, 공개엔 False 
DEBUG = True

# 우리 웹사이트로 접근 가능한 url
ALLOWED_HOSTS = []


# Application definition

# APP : 하나의 프로젝트/웹사이트에 들어간 기능들
# url들로 단위를 나눔. 카페 앱, 블로그 앱 등.
# 장고에서는 실제로 구현해야 하는 것을 미리 작성해준다.
INSTALLED_APPS = [
    'lotto',
    'django.contrib.admin',         # 관리자 페이지를 위한 url들과 대응되는 templete들 즉, html들
    'django.contrib.auth',          # 회원가입 관련 기능
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# 앞서 만난 전체 지도에서 중간중간 눈에 보이지 않는, 장고에서 필요한 기능을 해준다.
# 해킹 방지 or 유저 침입 방지
# 보안 or 회원가입 등에서 필요한 보안을 어느정도 해준다.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# url 패턴을 정의하는 변수.
# site_1 안에 있는 urls.py를 의미한다.
# 모델 불러올 때 .py 생략이므로 이렇게만 써준다.
# 앱별로 있긴 하지만 얘가 주인공
ROOT_URLCONF = 'site_1.urls'

# 유저에게 되돌려줄 html 파일들.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],             # 폴더의 경로를 문자열로 적어줘야 한다.
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# 물리서버와 장고를 연결해주는 것.
WSGI_APPLICATION = 'site_1.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# 장고는 sqlite3 기준의 db 파일을 사용한다.
# models.py에서 데이터베이스 테이블 하나 당 클래스 하나 만듦. 그 순간 db 파일 생성
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

# 패스워드 관련 처리
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# css나 이미지나 js같은 것들은 수정할 것이 거의 없다.
# 유저에게 나가는 시점에 장고가 바꿔준다. 수정거의 안하고.
# 따라서 정적 파일이라고 한다.
# www에 배포하면 정적 파일은 유저에게 모두 노출된다.
STATIC_URL = '/static/'                         # 브라우저에서 url로 특정한 스태틱 파일로 접근할 때 활용되는 url
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # 내가 만든 스태틱 파일을 한 곳에 모은다.

# 앱 단위로 쓸거여서 앱들 마다 그들 안에 스태틱 파일들을 넣어준다.
# 그리고 collectstatic 명령어를 사용해서, 앱 마다 흩어져 있는 스태틱 파일들을 한 곳에 모은다.
# main 스태틱 폴더로 모든 스태틱 파일들이 모인다.

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
